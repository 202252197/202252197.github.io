{"title":"Java7新特性","uid":"2d1512c57b77604216ac9cf1270a8ecb","slug":"Java7新特性","date":"2023-04-04T06:57:12.756Z","updated":"2023-04-04T06:59:48.006Z","comments":true,"path":"api/articles/Java7新特性.json","keywords":null,"cover":null,"content":"<h3 id=\"二进制字面量\"><a href=\"#二进制字面量\" class=\"headerlink\" title=\"二进制字面量\"></a><strong>二进制字面量</strong></h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">jdk7开始,终于可以用二进制来表示整数(byte,short,int和long)。\n使用二进制字面量的好处是,可以使代码更容易被理解。语法非常简单,\n只要在二进制数值前面加0b或0B\n举例：int x&#x3D;0B110110;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"数字字面量可以出现下划线\"><a href=\"#数字字面量可以出现下划线\" class=\"headerlink\" title=\"数字字面量可以出现下划线\"></a><strong>数字字面量可以出现下划线</strong></h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">为了增强对数值的阅读性,如我们经常把数据用逗号分隔一样，JK7提供了_对数值分隔。\n举例:int x&#x3D;1_000;\n注意事件:\n    不能出现在进制标识和数值之间\n    不能出现在数值开头和结尾\n    不能出现在小数点旁边<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"swithc语句可以用字符串\"><a href=\"#swithc语句可以用字符串\" class=\"headerlink\" title=\"swithc语句可以用字符串\"></a>swithc语句可以用字符串</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">   String value&#x3D;&quot;吕世昊&quot;;\nswitch (value) &#123;\ncase &quot;吕世昊&quot;:\n\tSystem.out.println(&quot;嗯嗯他是人才&quot;);\n\tbreak;\ndefault:\n\tSystem.out.println(&quot;嗯嗯他是不人才&quot;);\n\tbreak;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"泛型简化\"><a href=\"#泛型简化\" class=\"headerlink\" title=\"泛型简化\"></a>泛型简化</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;后面的泛型类型可以不需要写,这叫泛型推断,也可以叫菱形泛型\nArrayList&lt;String&gt; arrayList&#x3D;new ArrayList&lt;&gt;();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"异常的多个catch合并\"><a href=\"#异常的多个catch合并\" class=\"headerlink\" title=\"异常的多个catch合并\"></a>异常的多个catch合并</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Java</span> <span class=\"token number\">7</span>之前的版本：\n如果用一个<span class=\"token keyword\">catch</span>块处理多个异常，可以用管道符（<span class=\"token operator\">|</span>）将它们分开，在这种情况下异常参数变量（ex）是定义为<span class=\"token keyword\">final</span>的，所以不能被修改。这一特性将生成更少的字节码并减少代码冗余。\n<span class=\"token class-name\">Java</span> <span class=\"token number\">7</span>之前的版本：\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n在<span class=\"token class-name\">Java</span> <span class=\"token number\">7</span>中，我们可以用一个<span class=\"token keyword\">catch</span>块捕获所有这些异常：\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">SQLException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"try-with-resources语句\"><a href=\"#try-with-resources语句\" class=\"headerlink\" title=\"try-with-resources语句\"></a>try-with-resources语句</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">格式<span class=\"token operator\">:</span><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>必须是<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>AutoCloseable</span>的子类对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span>\n好处：\n    资源自动释放<span class=\"token punctuation\">,</span>不需要<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>了\n    把需要关闭资源的部分都定义在这里就ok了\n    主要是沉体系的对象是这个接口的子类<span class=\"token punctuation\">(</span>看<span class=\"token constant\">JDK7</span>的<span class=\"token constant\">API</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n* 个性签名：今天的努力只要对得起自己就满足了\n* 创建人：吕世昊  \n* 创建时间：2019年3月22日 下午1:48:41   \n* @version\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AutoCloseable</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//1.7之后，只要实现了AutoCloseable接口</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test3</span> test<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--执行main方法--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--exception--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//JDK1.7之前,释放资源方式</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--执行main方法--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--exception--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--close--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"二进制字面量jdk7开始,终于可以用二进制来表示整数(byte,short,int和long)。 使用二进制字面量的好处是,可以使代码更容易被理解。语法非常简单, 只要在二进制数值前面加0b或0B 举例：int x&#x3D;0B110110; 数字字面量可以出现下划线为了增强对...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E9%9D%A2%E9%87%8F\"><span class=\"toc-text\">二进制字面量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8F%AF%E4%BB%A5%E5%87%BA%E7%8E%B0%E4%B8%8B%E5%88%92%E7%BA%BF\"><span class=\"toc-text\">数字字面量可以出现下划线</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#swithc%E8%AF%AD%E5%8F%A5%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">swithc语句可以用字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%AE%80%E5%8C%96\"><span class=\"toc-text\">泛型简化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%9A%E4%B8%AAcatch%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">异常的多个catch合并</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#try-with-resources%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">try-with-resources语句</span></a></li></ol>","author":{"name":"吕世昊","slug":"blog-author","avatar":"https://i.328888.xyz/2023/04/04/ijVJyU.png","link":"/","description":"风华是一指流砂，苍老是一段年华","socials":{"github":"https://github.com/202252197","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31611529","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JAVA反射","uid":"0debcd256996db7c9a3f68ed4dfb6299","slug":"java反射","date":"2023-04-04T06:58:11.672Z","updated":"2023-04-04T07:01:27.506Z","comments":true,"path":"api/articles/java反射.json","keywords":null,"cover":[],"text":"JAVA反射反射的常见作用 1.动态加载类,动态获取类的信息(属性,方法,构造器) 2.动态构造对象 3.动态调用和外处理属性 4.获取泛型信息 5.处理注解 Class类的对象如何获取？1.运用getClass() 2.运用Class.forName()(最常被使用) 3.运用...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[],"author":{"name":"吕世昊","slug":"blog-author","avatar":"https://i.328888.xyz/2023/04/04/ijVJyU.png","link":"/","description":"风华是一指流砂，苍老是一段年华","socials":{"github":"https://github.com/202252197","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31611529","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Java8新特性","uid":"fb58890547580a34de2bb6837aa1cfff","slug":"java8新特性","date":"2023-04-04T06:57:12.703Z","updated":"2023-04-04T06:59:36.678Z","comments":true,"path":"api/articles/java8新特性.json","keywords":null,"cover":null,"text":"为何需要Lambda表达式1.在Java中,我们无法将函数作为参数传递给一个方法,也无法声明返回一个函数的方法 2.在JavaScript中,函数参数是一个函数,返回值是另一个函数的情况是非常常见的; JavaScript是一门非常典型的函数式语言 何为Lambada表达式Lam...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[],"tags":[],"author":{"name":"吕世昊","slug":"blog-author","avatar":"https://i.328888.xyz/2023/04/04/ijVJyU.png","link":"/","description":"风华是一指流砂，苍老是一段年华","socials":{"github":"https://github.com/202252197","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_31611529","juejin":"","customs":{}}},"feature":true}}